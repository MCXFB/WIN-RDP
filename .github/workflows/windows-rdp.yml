name: Windows RDP Tunnel (Secured)

on: workflow_dispatch  # Only manual trigger for security

jobs:
  rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # Max 6 hours for free tier

    steps:
    - name: Download ngrok v3
      shell: powershell
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath ngrok

    - name: Authenticate ngrok
      shell: powershell
      run: |
        .\ngrok\ngrok.exe config add-authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Configure RDP
      shell: powershell
      run: |
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Create secure random password
        Add-Type -AssemblyName System.Web
        $password = [System.Web.Security.Membership]::GeneratePassword(24, 4)
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $password -Force)
        Write-Host "::add-mask::$password"
        Write-Host "Generated password: $password"

    - name: Start ngrok tunnel
      shell: powershell
      run: |
    # Start ngrok with logging
    $logPath = "$pwd\ngrok.log"
    Start-Process -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389 --log $logPath" -NoNewWindow
    
    # Verify ngrok process
    Start-Sleep -Seconds 5
    if (-not (Get-Process ngrok -ErrorAction SilentlyContinue)) {
        Write-Host "::error::Ngrok failed to start!"
        Get-Content $logPath -ErrorAction SilentlyContinue | Write-Host
        exit 1
    }

    # Extended retry logic
    $maxRetries = 10
    $retryCount = 0
    $publicUrl = $null
    
    while ($retryCount -lt $maxRetries -and -not $publicUrl) {
        try {
            $response = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels -ErrorAction Stop
            $publicUrl = $response.tunnels[0].public_url
            Write-Host "::add-mask::$publicUrl"
            Write-Host "RDP URL: $publicUrl"
        }
        catch {
            Write-Host "Attempt $($retryCount+1)/$maxRetries - Waiting for ngrok API..."
            Get-Content $logPath -Tail 10 -ErrorAction SilentlyContinue | Write-Host
            Start-Sleep -Seconds 10
            $retryCount++
        }
    }

    if (-not $publicUrl) {
        Write-Host "::error::Failed to get tunnel URL after $maxRetries attempts"
        Get-Content $logPath -ErrorAction SilentlyContinue | Write-Host
        Get-Process ngrok | Stop-Process -Force
        exit 1
    }

    - name: Maintain connection
      shell: powershell
      run: |
        try {
            while ($true) {
                Write-Host "Active at $(Get-Date -Format 'HH:mm:ss')"
                Start-Sleep -Seconds 300
            }
        }
        finally {
            Write-Host "Cleaning up..."
            Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
        }
