name: Secure Windows Tunnel (Final)

on: workflow_dispatch  # Manual trigger only

jobs:
  secure-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # 6h max (GitHub Free limit)

    steps:
    - name: Setup ngrok v3
      shell: powershell
      run: |
        # Download latest stable ngrok v3
        $ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
        Invoke-WebRequest $ngrokUrl -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath ngrok
        
        # Verify executable exists
        if (-not (Test-Path ".\ngrok\ngrok.exe")) {
            Write-Host "::error::Ngrok installation failed!"
            exit 1
        }
        
        # Add to system PATH
        echo "$pwd\ngrok" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: Authenticate ngrok
      shell: powershell
      run: |
        .\ngrok\ngrok.exe config add-authtoken $Env:NGROK_AUTH_TOKEN
        if (-not $?) { exit 1 }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Configure Secure RDP
      shell: powershell
      run: |
        # Enable RDP securely
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
          -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Restrict RDP to local interface
        New-NetFirewallRule -DisplayName "RestrictedRDP" `
          -Direction Inbound -LocalPort 3389 -Protocol TCP `
          -Action Allow -InterfaceType Private
        
        # Generate secure credentials
        Add-Type -AssemblyName System.Web
        $password = [System.Web.Security.Membership]::GeneratePassword(24, 4)
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString $password -AsPlainText -Force)
        Write-Host "::add-mask::$password"
        Write-Host "Generated password: ***"

    - name: Establish Encrypted Tunnel
      shell: powershell
      run: |
        $logPath = "$pwd\ngrok.log"
        $maxRetries = 25
        $retryInterval = 12
        $publicUrl = $null

        try {
            # Start ngrok with enhanced security
            Start-Process -FilePath ".\ngrok\ngrok.exe" `
              -ArgumentList "tcp 3389 --log $logPath --log-level debug --region us" `
              -NoNewWindow -PassThru

            # Progressive wait algorithm
            1..$maxRetries | ForEach-Object {
                try {
                    $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" `
                      -TimeoutSec 15 -ErrorAction Stop
                    
                    if ($response.tunnels.Count -gt 0) {
                        $publicUrl = $response.tunnels[0].public_url
                        Write-Host "::add-mask::$publicUrl"
                        Write-Host "Secure Tunnel Endpoint: [MASKED]"
                        return
                    }
                }
                catch {
                    Write-Host "Connection attempt $_/$maxRetries - Initializing secure channel..."
                    Get-Content $logPath -Tail 20 -Wait | 
                      Select-String -Pattern 'error|ERR_NGROK|failed' | Write-Host
                }
                Start-Sleep -Seconds $retryInterval
                $retryInterval = [Math]::Min($retryInterval * 1.5, 60)
            }
        }
        finally {
            if (-not $publicUrl) {
                Write-Host "::error::Tunnel establishment failed after $maxRetries attempts"
                Get-Content $logPath -ErrorAction SilentlyContinue | Write-Host
                Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
                exit 1
            }
        }

    - name: Maintain Secure Connection
      shell: powershell
      run: |
        try {
            # Health monitoring loop
            while ($true) {
                $status = Invoke-RestMethod -Uri "http://localhost:4040/api" -TimeoutSec 30
                Write-Host "Tunnel Status: $($status.msg) - $(Get-Date -Format 'HH:mm:ss UTC')"
                
                # Validate active connection
                $connCheck = Get-NetTCPConnection -LocalPort 3389 -ErrorAction SilentlyContinue
                if (-not $connCheck) {
                    Write-Host "::warning::No active RDP connections detected"
                }
                
                Start-Sleep -Seconds 300
            }
        }
        finally {
            Write-Host "Initiating secure shutdown sequence..."
            Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
            Disable-NetFirewallRule -DisplayGroup "Remote Desktop"
        }
