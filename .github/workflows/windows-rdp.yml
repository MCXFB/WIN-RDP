name: Windows RDP Tunnel (Absolute Path Fix)

on: workflow_dispatch

jobs:
  expose-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Setup ngrok
      shell: powershell
      run: |
        # Get absolute path
        $ngrokDir = "$pwd\ngrok"
        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath $ngrokDir
        
        # Verify extraction
        if (-not (Test-Path "$ngrokDir\ngrok.exe")) {
            Write-Host "::error::Ngrok extraction failed!"
            Get-ChildItem $ngrokDir
            exit 1
        }

    - name: Authenticate ngrok
      shell: powershell
      run: |
        $ngrokExe = "$pwd\ngrok\ngrok.exe"
        & $ngrokExe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Start ngrok with verification
      shell: powershell
      run: |
        $ngrokExe = "$pwd\ngrok\ngrok.exe"
        $logFile = "$pwd\ngrok.log"
        
        # Start process directly (not in job)
        Start-Process $ngrokExe -ArgumentList "tcp 3389 --log=stdout --log-level=debug" -NoNewWindow
        
        # Verify process start
        Start-Sleep -Seconds 5
        if (-not (Get-Process ngrok -ErrorAction SilentlyContinue)) {
            Write-Host "::error::Ngrok process failed to start!"
            exit 1
        }

        # Extended retry logic with file logging
        $maxRetries = 20
        $retryInterval = 10
        $connected = $false
        
        for ($i = 0; $i -lt $maxRetries; $i++) {
            try {
                $status = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels -ErrorAction Stop
                if ($status.tunnels.Count -gt 0) {
                    $publicUrl = $status.tunnels[0].public_url
                    Write-Host "RDP URL: $publicUrl"
                    $connected = $true
                    break
                }
            }
            catch {
                Write-Host "Attempt $($i+1)/$maxRetries - Checking ngrok status..."
                Get-Content $logFile -Tail 10 -ErrorAction SilentlyContinue | Write-Host
            }
            Start-Sleep -Seconds $retryInterval
        }

        if (-not $connected) {
            Write-Host "::error::Final failure after $maxRetries attempts"
            Get-Content $logFile -ErrorAction SilentlyContinue | Write-Host
            exit 1
        }

    - name: Maintain connection
      shell: powershell
      run: |
        try {
            while ($true) {
                Write-Host "Active at $(Get-Date -Format 'HH:mm:ss')"
                Start-Sleep -Seconds 300
            }
        }
        finally {
            Write-Host "Cleaning up..."
            Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
        }
